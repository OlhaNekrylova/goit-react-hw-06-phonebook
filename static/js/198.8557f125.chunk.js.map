{"version":3,"file":"static/js/198.8557f125.chunk.js","mappings":"+MAAaA,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,QAAV,ECCnC,EAAuB,0BAAvB,EAAyD,2BAAzD,EAA4F,2BAA5F,EAAgI,4B,SCsFhI,EAjFoB,WAChB,IAAMC,GAAcC,EAAAA,EAAAA,IAAYJ,GAE1BK,GAAWC,EAAAA,EAAAA,MAyCjB,OACQ,kBAAMC,UAAWC,EAAUC,SAxCV,SAAAC,GACrBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAITC,EAAa,CAAEC,KAHRH,EAAKI,SAASD,KAAKE,MAGLC,OAFZN,EAAKI,SAASE,OAAOD,SAIXd,EAAYgB,MAAK,SAAAC,GAAO,OAC7CA,EAAQL,KAAKM,gBAAkBP,EAAWC,KAAKM,aADF,IAK7CC,MAAM,GAAD,OAAIR,EAAWC,KAAf,8BAELV,GAASkB,EAAAA,EAAAA,IAAWT,IACpBF,EAAKY,QAEZ,EAsBO,WACI,mBAAOjB,UAAWC,EAAlB,kBAEI,kBACID,UAAWC,EACXiB,KAAK,OACLV,KAAK,OACLW,QAAQ,yHACRC,MAAM,yIAGNC,UAAQ,QAIhB,mBAAOrB,UAAWC,EAAlB,oBAEI,kBACID,UAAWC,EACXiB,KAAK,MACLV,KAAK,SACLW,QAAQ,yFACRC,MAAM,+FAGNC,UAAQ,QAIhB,mBAAQrB,UAAWC,EAAaiB,KAAK,SAArC,2BAKX,ECrFQI,G,OAAY,SAAA5B,GAAK,OAAIA,EAAM6B,MAAV,GCC9B,EAAuB,0BAAvB,EAAwD,0BAAxD,EAAyF,0BAAzF,EAA4H,4BCUtHC,EAAc,WAChB,ILE0CC,EKFpC7B,GAAcC,EAAAA,EAAAA,IAAYJ,GAC1B8B,GAAS1B,EAAAA,EAAAA,IAAYyB,GAGrBxB,GAAWC,EAAAA,EAAAA,MAMX2B,EAAcH,GLRsBE,EKQqBF,EAAb3B,ELPlC2B,QAAO,SAAAI,GAAO,OAC1BA,EAAQnB,KAAKM,cAAcc,SAASH,EAAWX,cADrB,KKO2ClB,EAGzE,OACI,eAAII,UAAWC,EAAf,SACKyB,EAAYG,KAAI,gBAAGC,EAAH,EAAGA,GAAItB,EAAP,EAAOA,KAAMG,EAAb,EAAaA,OAAb,OACb,gBAEAX,UAAWC,EAFX,WAGA,eAAGD,UAAWC,EAAd,UAAyBO,EAAzB,KAAiCG,MACjC,mBACIX,UAAWC,EACXiB,KAAK,SACLa,QAAS,kBAjBG,SAACD,GACzBhC,GAASkC,EAAAA,EAAAA,IAAcF,GAC1B,CAe8BG,CAAoBH,EAA1B,EAHb,sBAHKA,EAFQ,KAgB5B,EAEDN,EAAYU,aAAe,CACvBC,MAAO,IAcX,Q,SC3DA,EAA8B,4BAA9B,EAAwE,4BCqCxE,EA9Be,WACX,IAAMZ,GAAS1B,EAAAA,EAAAA,IAAYyB,GAErBxB,GAAWC,EAAAA,EAAAA,MAMjB,OACI,mBAAOC,UAAWC,EAAlB,mCAEI,kBACID,UAAWC,EACXiB,KAAK,OAGLR,MAAOa,EACPa,SAbS,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OACpBvC,GAASwC,EAAAA,EAAAA,GAAUD,EAAO3B,OAC7B,EAYWW,UAAQ,MAIvB,EC9BD,GAAgB,KAAO,0BC8BvB,EAzBmB,WAEf,OACI,4BACI,uCACA,iBAAKrB,UAAWuC,EAAAA,QAAhB,WACI,gBAAKvC,UAAWuC,EAAAA,MAAhB,UACI,SAAC,EAAD,OAIJ,iBAAKvC,UAAWuC,EAAAA,MAAhB,WACI,sCACA,SAAC,EAAD,KAGA,SAAC,EAAD,YAOnB,ECnBD,EARiB,WACb,OACI,+BACI,SAAC,EAAD,KAGX,C","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-06-phonebook/./src/modules/ContactForm/ContactForm.module.css?32da","modules/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://goit-react-hw-06-phonebook/./src/modules/ContactList/ContactList.module.css?aa60","modules/ContactList/ContactList.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/Filter/Filter.module.css?ca1f","modules/Filter/Filter.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/MyContacts/MyContacts.module.css?c4c0","modules/MyContacts/MyContacts.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const getAllContacts = store => store.contacts;\n\n// export const getFilteredContacts = ({contacts, filter}) => {\n//     if (!filter) {\n//         return contacts;\n//     }\n\n//     const normalizedFilter = filter.toLowerCase();\n//     const result = contacts.filter(({ name, number }) => {\n//         return (name.toLowerCase().includes(normalizedFilter) || number.toLowerCase().includes(normalizedFilter))\n//     })\n\n//     return result;\n// }\nexport const getFilteredContacts = (contacts, filterName) => {\n    return contacts.filter(contact =>      \n        contact.name.toLowerCase().includes(filterName.toLowerCase()))\n}; \n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__nXUDe\",\"label\":\"ContactForm_label__0MtWF\",\"input\":\"ContactForm_input__++7Rw\",\"button\":\"ContactForm_button__aavNL\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contacts-slice\";\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\n// import PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\n\nconst ContactForm = () => {\n    const allContacts = useSelector(getAllContacts);\n    \n    const dispatch = useDispatch();\n\n    const handleAddContact = e => {\n        e.preventDefault();\n        const form = e.currentTarget;\n        const name = form.elements.name.value;\n        const number = form.elements.number.value;\n\n        const newContact = { name, number };\n\n        const isPresentContact = allContacts.find(element => \n            element.name.toLowerCase() === newContact.name.toLowerCase()\n        ) ? true: false;\n        \n        if (isPresentContact){\n            alert(`${newContact.name} is already in contacts.`)\n        } else {\n            dispatch(addContact(newContact));\n            form.reset();\n        }        \n    }\n\n    // const isDublicate = (name, number) => {\n    //     const normalizedName = name.toLowerCase();\n    //     const normalizedNumber = number.toLowerCase();\n    //     const result = allContacts.find(({ name, number }) => {\n    //         return (name.toLowerCase() === normalizedName && number.toLowerCase() === normalizedNumber)\n    //     })\n\n    //     return Boolean(result);\n    // }\n\n    // const handleAddContact = ({ name, number }) => {\n    //     if (isDublicate(name, number)) {\n    //         alert(`${name} and ${number} are already in contacts.`);\n    //         return false;\n    //     }\n\n    //     dispatch(addContact({ name, number }));\n    // }\n    \n    return (\n            <form className={css.form} onSubmit={handleAddContact}>\n                <label className={css.label}> \n                    Name\n                    <input\n                        className={css.input}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        // value={name}\n                        // onChange={handleChange}\n                        required\n                    />\n                </label>\n                    \n                <label className={css.label}>\n                    Number\n                    <input\n                        className={css.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        // value={number}\n                        // onChange={handleChange}\n                        required\n                    />\n                </label>\n                    \n                <button className={css.button}  type='submit'>\n                    Add contact\n                </button>\n            </form>\n        );\n    };\n\nexport default ContactForm;\n// ContactForm.propTypes = {\n//     onSubmit: PropTypes.func.isRequired,\n// };","export const getFilter = store => store.filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__w6thP\",\"item\":\"ContactList_item__0aVR0\",\"info\":\"ContactList_info__KHl4K\",\"button\":\"ContactList_button__6lZ5J\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport React from 'react';\n// import PropTypes from 'prop-types';\n\nimport { deleteContact } from \"../../redux/contacts/contacts-slice\";\n\nimport { getAllContacts, getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\nimport {getFilter} from \"../../redux/filter/filter-selectors\";\n\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n    const allContacts = useSelector(getAllContacts);\n    const filter = useSelector(getFilter);\n    // const filteredContacts = useSelector(getFilteredContacts);\n\n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    const contactList = filter ? getFilteredContacts (allContacts, filter) : allContacts;\n    // const contactList = filteredContacts;\n\n    return (\n        <ul className={css.list}>\n            {contactList.map(({ id, name, number }) => (\n                <li \n                key={id}\n                className={css.item}>\n                <p className={css.info}>{name}: {number}</p>\n                <button\n                    className={css.button}\n                    type=\"button\"\n                    onClick={() => handleDeleteContact(id)}\n                >\n                Delete\n                </button>\n            </li>\n            ))}\n        </ul>\n    );\n};\n\nContactList.defaultProps = {\n    items: []\n}\n\n// ContactList.propTypes = {\n//     items: PropTypes.arrayOf(\n//         PropTypes.shape({\n//             id: PropTypes.string.isRequired,\n//             name: PropTypes.string.isRequired,\n//             number: PropTypes.string.isRequired,\n//         })\n//     ),\n//     onDeleteContact: PropTypes.func.isRequired,\n// };\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__HwuTE\",\"filterInput\":\"Filter_filterInput__LOSid\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport React from 'react';\n// import PropTypes from 'prop-types';\nimport {setFilter} from \"../../redux/filter/filter-slice\";\nimport {getFilter} from \"../../redux/filter/filter-selectors\";\n\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n    const filter = useSelector(getFilter);\n\n    const dispatch = useDispatch();\n\n    const handleFilter = ({ target }) => {\n        dispatch(setFilter(target.value))\n    };\n\n    return (\n        <label className={css.filterLabel}>\n            Find contacts by name\n            <input\n                className={css.filterInput}\n                type=\"text\"\n                // value={value}\n                // onChange={onChange}\n                value={filter}\n                onChange={handleFilter}\n                required\n            />\n        </label>\n    ); \n};\n\n// Filter.propTypes = {\n//     value: PropTypes.string.isRequired,\n//     onChange: PropTypes.func.isRequired,\n// };\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MyContacts_text__88sVP\"};","import ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\n\nimport styles from \"./MyContacts.module.css\";\n\nconst MyContacts = () => {\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <div className={styles.wrapper}>\n                <div className={styles.block}>\n                    <ContactForm \n                    // onSubmit={handleAddContact}\n                    />\n                </div> \n                <div className={styles.block}>\n                    <h2>Contacts</h2>\n                    <Filter \n                    // value={filter} handleChange={handleFilter} \n                    />\n                    <ContactList />\n                    {/* {isContacts && <ContactList contacts={filteredContacts} onDeleteContact={handleDeleteContact}  />}\n                    {!isContacts && <p className={styles.text}>No contacts in list</p>} */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MyContacts;","import MyContacts from \"../../modules/MyContacts/MyContacts\";\n\nconst HomePage = ()=> {\n    return (\n        <>\n            <MyContacts />\n        </>\n    )\n}\n\nexport default HomePage;"],"names":["getAllContacts","store","contacts","allContacts","useSelector","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","form","currentTarget","newContact","name","elements","value","number","find","element","toLowerCase","alert","addContact","reset","type","pattern","title","required","getFilter","filter","ContactList","filterName","contactList","contact","includes","map","id","onClick","deleteContact","handleDeleteContact","defaultProps","items","onChange","target","setFilter","styles"],"sourceRoot":""}