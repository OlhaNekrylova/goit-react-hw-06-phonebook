{"version":3,"file":"static/js/198.80bac4e7.chunk.js","mappings":"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","sources":["redux/contacts/contacts-selectors.js","webpack://goit-react-hw-06-phonebook/./src/modules/ContactForm/ContactForm.module.css?32da","modules/ContactForm/ContactForm.jsx","redux/filter/filter-selectors.js","webpack://goit-react-hw-06-phonebook/./src/modules/ContactList/ContactList.module.css?aa60","modules/ContactList/ContactList.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/Filter/Filter.module.css?ca1f","modules/Filter/Filter.jsx","webpack://goit-react-hw-06-phonebook/./src/modules/MyContacts/MyContacts.module.css?c4c0","modules/MyContacts/MyContacts.jsx","pages/HomePage/HomePage.jsx"],"sourcesContent":["export const getAllContacts = store => store.contacts;\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if (!filter) {\n        return contacts;\n    }\n\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.filter(({ name, number }) => {\n        return (name.toLowerCase().includes(normalizedFilter) || number.toLowerCase().includes(normalizedFilter))\n    })\n\n    return result;\n}","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__nXUDe\",\"label\":\"ContactForm_label__0MtWF\",\"input\":\"ContactForm_input__++7Rw\",\"button\":\"ContactForm_button__aavNL\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport { addContact } from \"../../redux/contacts/contacts-slice\";\nimport { getAllContacts } from \"../../redux/contacts/contacts-selectors\";\n// import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport css from './ContactForm.module.css';\n\nexport default function ContactForm () {\n    // const filteredContacts = useSelector(getFilteredContacts);\n    const allContacts = useSelector(getAllContacts);\n    \n    const dispatch = useDispatch();\n\n    const isDublicate = (name, number) => {\n        const normalizedName = name.toLowerCase();\n        const normalizedNumber = number.toLowerCase();\n        const result = allContacts.find(({ name, number }) => {\n            return (name.toLowerCase() === normalizedName && number.toLowerCase() === normalizedNumber)\n        })\n\n        return Boolean(result);\n    }\n\n    const handleAddContact = ({ name, number }) => {\n        if (isDublicate(name, number)) {\n            alert(`${name} and ${number} are already in contacts.`);\n            return false;\n        }\n\n        dispatch(addContact({ name, number }));\n    }\n    \n    return (\n            <form className={css.form} onSubmit={handleAddContact}>\n                <label className={css.label}> \n                    Name\n                    <input\n                        className={css.input}\n                        type=\"text\"\n                        name=\"name\"\n                        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                        // value={name}\n                        // onChange={handleChange}\n                        required\n                    >\n                    </input>\n                </label>\n                    \n                <label className={css.label}>\n                    Number\n                    <input\n                        className={css.input}\n                        type=\"tel\"\n                        name=\"number\"\n                        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                        // value={number}\n                        // onChange={handleChange}\n                        required\n                    > \n                    </input>\n                </label>\n                    \n                <button className={css.button}  type='submit'>\n                    Add contact\n                </button>\n            </form>\n        );\n    };\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};","export const getFilter = store => store.filter;","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"ContactList_list__w6thP\",\"item\":\"ContactList_item__0aVR0\",\"info\":\"ContactList_info__KHl4K\",\"button\":\"ContactList_button__6lZ5J\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport { deleteContact } from \"../../redux/contacts/contacts-slice\";\n\nimport { getAllContacts, getFilteredContacts } from \"../../redux/contacts/contacts-selectors\";\nimport {getFilter} from \"../../redux/filter/filter-selectors\";\n\nimport css from './ContactList.module.css';\n\nconst ContactList = () => {\n    const allContacts = useSelector(getAllContacts);\n    const filter = useSelector(getFilter);\n    // const filteredContacts = useSelector(getFilteredContacts);\n\n    const dispatch = useDispatch();\n\n    const handleDeleteContact = (id) => {\n        dispatch(deleteContact(id));\n    }\n\n    const contactList = filter ? getFilteredContacts (allContacts, filter) : allContacts;\n    // const contactList = filteredContacts;\n\n    return (\n        <ul className={css.list}>\n            {contactList.map(({ id, name, number }) => (\n                <li \n                key={id}\n                className={css.item}>\n                <p className={css.info}>{name}: {number}</p>\n                <button\n                    className={css.button}\n                    type=\"button\"\n                    onClick={() => handleDeleteContact(id)}\n                >\n                Delete\n                </button>\n            </li>\n            ))}\n        </ul>\n    );\n};\n\nContactList.defaultProps = {\n    items: []\n}\n\n\nContactList.propTypes = {\n    items: PropTypes.arrayOf(\n        PropTypes.shape({\n            id: PropTypes.string.isRequired,\n            name: PropTypes.string.isRequired,\n            number: PropTypes.string.isRequired,\n        })\n    ),\n    onDeleteContact: PropTypes.func.isRequired,\n};\n\nexport default ContactList;","// extracted by mini-css-extract-plugin\nexport default {\"filterLabel\":\"Filter_filterLabel__HwuTE\",\"filterInput\":\"Filter_filterInput__LOSid\"};","import { useSelector, useDispatch } from \"react-redux\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nimport {setFilter} from \"../../redux/filter/filter-slice\";\nimport {getFilter} from \"../../redux/filter/filter-selectors\";\n\nimport css from './Filter.module.css';\n\nconst Filter = () => {\n    const filter = useSelector(getFilter);\n\n    const dispatch = useDispatch();\n\n    const handleFilter = ({ target }) => {\n        dispatch(setFilter(target.value))\n    };\n\n    return (\n        <label className={css.filterLabel}>\n            Find contacts by name\n            <input\n                className={css.filterInput}\n                type=\"text\"\n                // value={value}\n                // onChange={onChange}\n                value={filter}\n                onChange={handleFilter}\n                // required\n            />\n        </label>\n    ); \n};\n\nFilter.propTypes = {\n    value: PropTypes.string.isRequired,\n    onChange: PropTypes.func.isRequired,\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"text\":\"MyContacts_text__88sVP\"};","import ContactForm from \"../ContactForm/ContactForm\";\nimport ContactList from \"../ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\n\nimport styles from \"./MyContacts.module.css\";\n\nconst MyContacts = () => {\n\n    // const isContacts = Boolean(filteredContacts.length);\n\n    return (\n        <div>\n            <h1>Phonebook</h1>\n            <div className={styles.wrapper}>\n                <div className={styles.block}>\n                    <ContactForm \n                    // onSubmit={handleAddContact}\n                    />\n                </div> \n                <div className={styles.block}>\n                    <h2>Contacts</h2>\n                    <Filter \n                    // value={filter} handleChange={handleFilter} \n                    />\n                    <ContactList />\n\n                    {/* {isContacts && <ContactList contacts={filteredContacts} onDeleteContact={handleDeleteContact}  />}\n                    {!isContacts && <p className={styles.text}>No contacts in list</p>} */}\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default MyContacts;","import MyContacts from \"../../modules/MyContacts/MyContacts\";\n\n// import styles from \"./HomePage.module.css\";\n\nconst HomePage = ()=> {\n    return (\n        <>\n            <MyContacts />\n        </>\n    )\n}\n\nexport default HomePage;"],"names":["getAllContacts","store","contacts","ContactForm","allContacts","useSelector","dispatch","useDispatch","className","css","onSubmit","name","number","normalizedName","toLowerCase","normalizedNumber","result","find","Boolean","isDublicate","alert","addContact","type","pattern","title","required","getFilter","filter","ContactList","contactList","normalizedFilter","includes","getFilteredContacts","map","id","onClick","deleteContact","handleDeleteContact","defaultProps","items","value","onChange","target","setFilter","styles"],"sourceRoot":""}